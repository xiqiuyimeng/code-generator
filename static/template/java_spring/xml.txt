{% set class = template_func.hump_class_name(table_name) %}
{% set hump_class = template_func.hump_property_name(table_name) %}
{% set key, key_type = template_func.get_key(col_list, 'java_type') %}
{% set key_jdbc = template_func.get_key_jdbc_str(col_list, 'jdbc_type') %}
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="{{ var_config.mapper_package }}.{{ class }}Mapper">
    <resultMap id="BaseResultMap" type="{{ var_config.model_package }}.{{ class }}">
        {% for data in col_list %}
        <result column="{{ data.name }}" property="{{ template_func.hump_property_name(data.name) }}" jdbcType="{{ data.jdbc_type.mapping_type if data.jdbc_type else 'undefined' }}"/>
        {% endfor %}
    </resultMap>
    <sql id="Base_Column_List">
        {{ template_func.get_base_sql_col(col_list, 9) }}
    </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="{{ key_type }}">
        select
        <include refid="Base_Column_List"/>
        from {{ table_name }}
        where {{ key_jdbc }}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="{{ key_type }}" >
        delete from {{ table_name }}
        where {{ key_jdbc }}
    </delete>
    <insert id="insert" parameterType="{{ var_config.model_package }}.{{ class }}" >
        insert into {{ table_name }} (
            {{ template_func.get_base_sql_col(col_list, 13) }}
        )
        values (
            {{ template_func.get_insert_value_str(col_list, 'jdbc_type', 13) }}
        )
    </insert>
    <insert id="insertSelective" parameterType="{{ var_config.model_package }}.{{ class }}" >
        insert into {{ table_name }}
        <trim prefix="(" suffix=")" suffixOverrides="," >
            {% for data in col_list %}
            <if test="{{ template_func.hump_property_name(data.name) }} != null" >
                {{ data.name }},
            </if>
            {% endfor %}
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            {% for data in col_list %}
            <if test="{{ template_func.hump_property_name(data.name) }} != null" >
                #{{'{'}}{{ template_func.hump_property_name(data.name) }},jdbcType={{ data.jdbc_type.mapping_type if data.jdbc_type else 'undefined' }}{{'}, '}}
            </if>
            {% endfor %}
        </trim>
    </insert>
    <update id="updateByPrimaryKey" parameterType="{{ var_config.model_package }}.{{ class }}" >
        update {{ table_name }}
        {% for data in col_list | selectattr('is_pk', '==', False) %}
        {% if loop.first %}
        set {{ data.name }} = #{{'{'}}{{ template_func.hump_property_name(data.name) }},jdbcType={{ data.jdbc_type.mapping_type if data.jdbc_type else 'undefined' }}{{'}, '}}
        {% elif loop.last %}
          {{ data.name }} = #{{'{'}}{{ template_func.hump_property_name(data.name) }},jdbcType={{ data.jdbc_type.mapping_type if data.jdbc_type else 'undefined' }}{{'}'}}
        {% else %}
          {{ data.name }} = #{{'{'}}{{ template_func.hump_property_name(data.name) }},jdbcType={{ data.jdbc_type.mapping_type if data.jdbc_type else 'undefined' }}{{'}, '}}
        {% endif %}
        {% endfor %}
        where {{ key_jdbc }}
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="{{ var_config.model_package }}.{{ class }}" >
        update {{ table_name }}
        <set>
        {% for data in col_list | selectattr('is_pk', '==', False) %}
            <if test="{{ template_func.hump_property_name(data.name) }} != null" >
                {{ data.name }} = #{{'{'}}{{ template_func.hump_property_name(data.name) }},jdbcType={{ data.jdbc_type.mapping_type if data.jdbc_type else 'undefined' }}{{'}'}},
            </if>
        {% endfor %}
        </set>
        where {{ key_jdbc }}
    </update>
    <select id="get{{ class }}List" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from {{ table_name }}
    </select>
</mapper>
